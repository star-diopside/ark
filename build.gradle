plugins {
    id "io.spring.dependency-management" version "1.0.5.RELEASE"
    id "org.springframework.boot" version "2.0.1.RELEASE"
    id "com.github.spotbugs" version "1.6.1"
}

allprojects {
    group = "jp.gr.java_conf.stardiopside.ark"
    version = "0.2.0-SNAPSHOT"

    ext {
        silverCommonsVersion = "1.0.2-SNAPSHOT"
        normalizeCssVersion = "5.0.0"
        bootstrapVersion = "3.3.7-1"
    }

    ext["lombok.version"] = "1.16.22"
}

subprojects {
    apply plugin: "java-library"
    apply plugin: "maven"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "eclipse-wtp"
    apply plugin: "checkstyle"
    apply plugin: "com.github.spotbugs"
    apply plugin: "jacoco"

    sourceCompatibility = JavaVersion.VERSION_1_9
    targetCompatibility = JavaVersion.VERSION_1_9

    eclipse.wtp.facet.file.whenMerged { facet ->
        facet.facets.each {
            if (it.name == "jst.java") {
                it.version = "9"
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    repositories {
        jcenter()
        mavenLocal()
    }

    dependencyManagement {
        imports {
            mavenBom "io.spring.platform:platform-bom:Cairo-RELEASE"
        }
    }

    configurations {
        all*.exclude group: "commons-logging", module: "commons-logging"
    }

    dependencies {
        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    }

    compileJava.dependsOn(processResources)

    javadoc {
        options.charSet = "UTF-8"
        options.encoding = "UTF-8"
        options.addBooleanOption("html5", true)
    }

    checkstyle {
        toolVersion = "8.10"
        configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
        ignoreFailures = true
    }

    spotbugs {
        toolVersion = "3.1.3"
        ignoreFailures = true
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    jacoco {
        toolVersion = "0.8.1"
    }

    task packageSources(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
    }

    task packageJavadoc(type: Jar, dependsOn: javadoc) {
        classifier = "javadoc"
        from javadoc.destinationDir
    }

    artifacts {
        archives packageSources
        archives packageJavadoc
    }
}

project(":ark-projects:ark-core") {
    dependencies {
        api "jp.gr.java_conf.stardiopside.silver.commons:silver-commons-support:${silverCommonsVersion}"
        api "org.springframework.boot:spring-boot-starter-data-jpa"
        api "javax.inject:javax.inject"
        implementation "org.springframework.boot:spring-boot-starter-logging"
        implementation "org.springframework:spring-context"
    }
}

project(":ark-projects:ark-support") {
    dependencies {
        implementation project(":ark-projects:ark-core")
        implementation "org.springframework:spring-context"
    }
}

project(":ark-projects:ark-data") {
    dependencies {
        api "org.springframework.security:spring-security-core"
        implementation "org.springframework.boot:spring-boot-starter-data-jpa"
        compileOnly "org.eclipse.persistence:org.eclipse.persistence.jpa"
        runtimeOnly "org.liquibase:liquibase-core"
        runtimeOnly "javax.xml.bind:jaxb-api"
        testImplementation project(":ark-projects:ark-core")
        testImplementation project(":ark-projects:ark-test-support")
    }
}

project(":ark-projects:ark-service") {
    dependencies {
        api project(":ark-projects:ark-core")
        api project(":ark-projects:ark-data")
        api "org.springframework.boot:spring-boot-starter-validation"
        implementation "commons-codec:commons-codec"
    }
}

project(":ark-projects:ark-batch") {
    dependencies {
        api project(":ark-projects:ark-service")
        implementation "jp.gr.java_conf.stardiopside.silver.commons:silver-commons-batch:${silverCommonsVersion}"
        implementation "org.springframework.boot:spring-boot-starter-batch"
        testImplementation project(":ark-projects:ark-test-support")
        testImplementation "org.springframework.batch:spring-batch-test"
        testImplementation "com.h2database:h2"
    }
}

project(":ark-projects:ark-web-controller") {
    dependencies {
        api project(":ark-projects:ark-service")
        api "org.springframework.boot:spring-boot-starter-web"
        implementation project(":ark-projects:ark-support")
        implementation files("lib/kaptcha-2.3.2.jar")
        implementation "jp.gr.java_conf.stardiopside.silver.commons:silver-commons-web:${silverCommonsVersion}"
        implementation "org.springframework.boot:spring-boot-starter-security"
        testImplementation project(":ark-projects:ark-test-support")
        testImplementation "org.springframework.security:spring-security-test"
    }
}

project(":ark-projects:ark-web-view") {
    dependencies {
        runtimeOnly "org.thymeleaf:thymeleaf-spring5"
        runtimeOnly "org.thymeleaf.extras:thymeleaf-extras-springsecurity4"
        runtimeOnly "nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect"
        runtimeOnly "org.webjars:webjars-locator-core"
        runtimeOnly "org.webjars:normalize.css:${normalizeCssVersion}"
        runtimeOnly "org.webjars:bootstrap:${bootstrapVersion}"
    }
}

project(":ark-projects:ark-web") {
    dependencies {
        implementation project(":ark-projects:ark-web-controller")
        implementation project(":ark-projects:ark-web-view")
        implementation "org.springframework.session:spring-session-data-redis"
        runtimeOnly "redis.clients:jedis"
    }
}

project(":ark-projects:ark-test-support") {
    dependencies {
        api "jp.gr.java_conf.stardiopside.silver.commons:silver-commons-test:${silverCommonsVersion}"
        api "org.springframework.boot:spring-boot-starter-test"
        implementation "org.springframework.boot:spring-boot-starter-data-jpa"
        runtimeOnly "org.postgresql:postgresql"
    }
}

project("ark-applications:ark-db-setup") {
    apply plugin: "org.springframework.boot"

    dependencies {
        implementation project(":ark-projects:ark-data")
        implementation "org.springframework.boot:spring-boot-starter-batch"
        runtimeOnly "org.postgresql:postgresql"
    }
}

project("ark-applications:ark-user-registration") {
    apply plugin: "org.springframework.boot"

    dependencies {
        implementation project(":ark-projects:ark-service")
        implementation "commons-cli:commons-cli"
        implementation "com.google.guava:guava"
        runtimeOnly "org.postgresql:postgresql"
    }
}

project(":ark-applications:ark-batch-runner") {
    apply plugin: "org.springframework.boot"

    dependencies {
        implementation project(":ark-projects:ark-batch")
        runtimeOnly "org.postgresql:postgresql"
    }
}

project(":ark-applications:ark-web-app") {
    apply plugin: "org.springframework.boot"

    dependencies {
        implementation project(":ark-projects:ark-web")
        runtimeOnly "org.postgresql:postgresql"
    }

    bootJar {
        mainClassName = "jp.gr.java_conf.stardiopside.ark.web.servlet.Server"
    }
}

project(":ark-servlets") {
    subprojects {
        eclipse.wtp.facet {
            facet name: "jst.web", version: "3.1"
            facet name: "wst.jsdt.web", version: "1.0"
        }
    }
}

project(":ark-servlets:ark-web-war") {
    apply plugin: "war"

    dependencies {
        implementation project(":ark-projects:ark-web")
        providedRuntime "org.springframework.boot:spring-boot-starter-tomcat"
    }

    war {
        archiveName = "ark-web.war"
    }
}
